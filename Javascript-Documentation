### **Project Overview**
This project uses JavaScript and jQuery to create an interactive Simon Game. The script handles user interactions, game sequences, and response validation.

---

### **1. Game Initialization**
This section explains how the game starts.

#### **1.1. Variables Used**
- `buttonColours`: An array storing the four button colors.
- `gamePattern`: Stores the randomly generated sequence.
- `userClickedPattern`: Stores the user's clicked sequence.
- `started`: Boolean to track if the game has started.
- `level`: Tracks the current game level.

#### **1.2. Starting the Game**
- The `keypress` event listens for a key press to start the game.
- If the game is not started (`started === false`), it updates the title and calls `nextSequence()`.
- The `started` variable is set to `true`.

```javascript
$(document).keypress(function() {
  if (!started) {
    $("#level-title").text("Level " + level);
    nextSequence();
    started = true;
  }
});
```

---

### **2. User Interaction Handling**
This section explains how user clicks are processed.

#### **2.1. Button Click Event**
- Detects when a button is clicked.
- Retrieves the `id` of the clicked button.
- Adds the color to `userClickedPattern`.
- Calls `playSound()` and `animatePress()`.
- Calls `checkAnswer()` to validate the input.

```javascript
$(".btn").click(function() {
  var userChosenColour = $(this).attr("id");
  userClickedPattern.push(userChosenColour);
  playSound(userChosenColour);
  animatePress(userChosenColour);
  checkAnswer(userClickedPattern.length-1);
});
```

---

### **3. Game Logic and Sequence Handling**
This section explains how game logic is handled.

#### **3.1. Generating the Next Sequence**
- Clears `userClickedPattern` for the new level.
- Increments `level` and updates the title.
- Selects a random color and adds it to `gamePattern`.
- Animates the chosen button and plays its sound.

```javascript
function nextSequence() {
  userClickedPattern = [];
  level++;
  $("#level-title").text("Level " + level);
  var randomNumber = Math.floor(Math.random() * 4);
  var randomChosenColour = buttonColours[randomNumber];
  gamePattern.push(randomChosenColour);
  $("#" + randomChosenColour).fadeIn(100).fadeOut(100).fadeIn(100);
  playSound(randomChosenColour);
}
```

#### **3.2. Checking the User's Answer**
- Compares the user's latest input with the expected value in `gamePattern`.
- If correct, and if all required inputs have been given, calls `nextSequence()` after a delay.
- If incorrect, plays a "wrong" sound, adds a red game-over effect, resets the game.

```javascript
function checkAnswer(currentLevel) {
    if (gamePattern[currentLevel] === userClickedPattern[currentLevel]) {
      if (userClickedPattern.length === gamePattern.length){
        setTimeout(function () {
          nextSequence();
        }, 1000);
      }
    } else {
      playSound("wrong");
      $("body").addClass("game-over");
      $("#level-title").text("Game Over, Press Any Key to Restart");
      setTimeout(function () {
        $("body").removeClass("game-over");
      }, 200);
      startOver();
    }
}
```

---

### **4. Additional Functions**
This section describes supporting functions.

#### **4.1. Animating Pressed Buttons**
- Adds the `pressed` class to create a temporary visual effect.
- Removes the class after 100 milliseconds.

```javascript
function animatePress(currentColor) {
  $("#" + currentColor).addClass("pressed");
  setTimeout(function () {
    $("#" + currentColor).removeClass("pressed");
  }, 100);
}
```

#### **4.2. Playing Sounds**
- Plays an audio file corresponding to the button pressed.

```javascript
function playSound(name) {
  var audio = new Audio("sounds/" + name + ".mp3");
  audio.play();
}
```

#### **4.3. Restarting the Game**
- Resets `level`, `gamePattern`, and `started` to allow a new game to begin.

```javascript
function startOver() {
  level = 0;
  gamePattern = [];
  started = false;
}
```

---

### **5. Summary**
This JavaScript file:
- Handles game initialization and user interactions.
- Generates and validates a sequence of button presses.
- Provides animations and sounds for a better user experience.
- Restarts the game when the user makes a mistake.

For more details, refer to the accompanying CSS and HTML files that define the layout and styles.

